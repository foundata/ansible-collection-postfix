
# Tasks for the Molecule prepare stage: Add resources needed for later steps
# (e.g. verify) on all driver-created instances.


- name: "Molecule | Prepare | Install needed packages"
  ansible.builtin.package:
    name:
      - "ca-certificates" # Certificate management tools
      - "openssl" # Create certificates, test STARTTLS
      - "python3-pexpect" # Ansible (ansible.builtin.expect)
      - "telnet" # Easy communication with SMTP
    state: "present"


# Helpful overview regarding certificate paths and tools on different OS:
# https://github.com/millermatt/osca


- name: "Molecule | Prepare | Certificates: Set paths (Debian)"
  ansible.builtin.set_fact:
    __testing_certs_base_dir: "/etc/ssl/certs"
    __testing_certs_trustanchors_dir: "/usr/local/share/ca-certificates"
  when:
    - (ansible_facts['os_family'] | lower) == 'debian'


- name: "Molecule | Prepare | Certificates: Set paths (Red Hat)"
  ansible.builtin.set_fact:
    __testing_certs_base_dir: "/etc/pki/tls/certs"
    __testing_certs_trustanchors_dir: "/etc/pki/ca-trust/source/anchors"
  when:
    - (ansible_facts['os_family'] | lower) == 'redhat'


- name: "Molecule | Prepare | Certificates: Set dummy cert file (PEM) path"
  ansible.builtin.set_fact:
    __testing_certs_dummycert_pem: "{{ __testing_certs_base_dir }}/dummy-cert.pem"


# Prepare different Diffie-Hellman parameter files. DH parameters are not a secret.
# The defaults might be quite good on many systems, but using predefined values
# recommended by the IETF in RFC 7919 are more sane. These groups are audited and
# may be more resistant to attacks than ones randomly generated.
- name: "Certificates: prepare different Diffie-Hellman parameter files"
  ansible.builtin.copy:
    dest: "{{ __testing_certs_base_dir }}/{{ item['file'] }}"
    content: "{{ item['content'] }}"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r" # 0644
  loop:
    - file: "dhparam_ffdhe2048"
      content: |
        -----BEGIN DH PARAMETERS-----
        MIIBCAKCAQEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
        +8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
        87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
        YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
        7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
        ssbzSibBsu/6iGtCOGEoXJf//////////wIBAg==
        -----END DH PARAMETERS-----
  when:
    # The file is passed via smtpd_tls_dh1024_param_file to Postfix.
    # From: https://www.postfix.org/postconf.5.html#smtpd_tls_dh1024_param_file
    # With Postfix â‰¥ 3.7, built with OpenSSL version is 3.0.0 or later, if the
    # parameter value is either empty or "auto" then the DH parameter selection
    # is delegated to the OpenSSL library, which selects appropriate parameters
    # based on the TLS handshake.
    #
    # This matches the following target platforms:
    # - Enterprise Linux 9 (OpenSSL 3.2.x, Postfix 3.5)
    # - Debian 11 (OpenSSL 1.1.x, Postfix 3.5)
    # - Ubuntu 22.04 (OpenSSL 3.0.x, Postfix 3.6)
    #
    # The DH file creation tasks and smtpd_tls_dh1024_param_file parameter
    # handling can be removed if these targets are not supported anymore.
    - ((ansible_facts['os_family'] | lower) == 'redhat' and (ansible_facts['distribution_major_version'] is ansible.builtin.version('9', '<='))) or
      ((ansible_facts['distribution'] | lower) == 'debian' and (ansible_facts['distribution_major_version'] is ansible.builtin.version('11', '<='))) or
      ((ansible_facts['distribution'] | lower) == 'ubuntu' and (ansible_facts['distribution_major_version'] is ansible.builtin.version('22', '<=')))


- name: "Molecule | Prepare | Certificates: Get info about dummy cert file"
  ansible.builtin.stat:
    path: "{{ __testing_certs_dummycert_pem }}"
    get_checksum: false
  register: __testing_dummycert_stat_result


- name: "Molecule | Prepare | Certificates: Create dummy cert"
  ansible.builtin.shell:
    # Inline script is based on /etc/pki/tls/make-dummy-cert from RHEL 7
    cmd: |
      set -u # Fail on unset vars
      set -o pipefail # Fail if any pipe cmd fails

      answers() {
        echo --
        echo "SomeState"
        echo "SomeCity"
        echo "SomeOrganization"
        echo "SomeOrganizationalUnit"
        echo "$(hostname -f)"
        echo "root@$(hostname -d)"
      }

      target="{{ __testing_certs_dummycert_pem }}"
      mkdir -p "$(dirname "${target}")"
      pem1="$(/bin/mktemp /tmp/openssl.XXXXXX)"
      pem2="$(/bin/mktemp /tmp/openssl.XXXXXX)"
      answers | /usr/bin/openssl req -newkey rsa:4096 -keyout "${pem1}" -nodes -x509 -days 3650 -out "${pem2}" 2> /dev/null
      cat "${pem1}"  > "${target}"
      echo ""       >> "${target}"
      cat "${pem2}" >> "${target}"
      rm -f "${pem1}" "${pem2}"
      unset pem1 pem2

      exit 0
    executable: "/bin/bash" # Support for other shells untested (so far)
  register: __testing_dummycert_create_result
  changed_when:
    - __testing_dummycert_create_result['rc'] == 0
  when:
    - __testing_dummycert_stat_result is defined
    - not __testing_dummycert_stat_result['stat']['exists']


- name: "Molecule | Prepare | Certificates: Set file permissions for dummy cert"
  ansible.builtin.file:
    path: "{{ __testing_certs_dummycert_pem }}"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r" # 0644


- name: "Molecule | Prepare | Certificates: Copy dummy cert into trust anchor store"
  ansible.builtin.copy:
    src: "{{ __testing_certs_dummycert_pem }}"
    dest: "{{ __testing_certs_trustanchors_dir }}/{{ __testing_certs_dummycert_pem | basename }}"
    remote_src: true
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r" # 0644


- name: "Molecule | Prepare | Certificates: Update OS certificate store (Debian)"
  ansible.builtin.command:
    cmd: "/usr/sbin/update-ca-certificates"
  when:
    - (ansible_facts['os_family'] | lower) == 'debian'


- name: "Molecule | Prepare | Certificates: Update OS certificate store (Red Hat)"
  ansible.builtin.command:
    cmd: "/usr/bin/update-ca-trust"
  when:
    - (ansible_facts['os_family'] | lower) == 'redhat'


### SASL (Simple Authentication and Security Layer) for better testing of restrictions
# Resources:
# - https://www.postfix.org/SASL_README.html
# - Why only PLAIN LOGIN:
#   https://datatracker.ietf.org/doc/html/draft-ietf-sasl-crammd5-to-historic-00.html#section-2
# - Important files:
#   Red Hat:
#   - /etc/sasl2/smtpd.conf ()
#   - /etc/sysconfig/saslauthd
#   Debian:
#   - /etc/sasl2/smtpd.conf (Provided by Postfix)
#   - /etc/default/saslauthd

- name: "Molecule | Prepare | Set variables for Cyrus SASL (Debian)"
  ansible.builtin.set_fact:
    __testing_run_postfix_packages_install_sasl_cyrus:
      - "libsasl2-modules"
      - "sasl2-bin" # Cyrus SASL - administration programs for SASL users database
    __testing_run_sasl_saslauthd_config_file: "/etc/default/saslauthd"
    __testing_run_sasl_saslauthd_socket_directory: "/var/run/saslauthd" # The socket is "mux" in this directory
    __testing_run_sasl_smtpd_config_file: "/etc/postfix/sasl/smtpd.conf" # Provided by Postfix packages
  when:
    - (ansible_facts['os_family'] | lower) == 'debian'


- name: "Molecule | Prepare | Set variables for Cyrus SASL (Red Hat)"
  ansible.builtin.set_fact:
    __testing_run_postfix_packages_install_sasl_cyrus:
      - "cyrus-sasl"
      - "cyrus-sasl-plain"
    __testing_run_sasl_saslauthd_config_file: "/etc/sysconfig/saslauthd"
    __testing_run_sasl_saslauthd_socket_directory: "/var/run/saslauthd" # The socket is "mux" in this directory
    __testing_run_sasl_smtpd_config_file: "/etc/sasl2/smtpd.conf" # Provided by Postfix packages
  when:
    - (ansible_facts['os_family'] | lower) == 'redhat'


- name: "Molecule | Prepare | Install Cyrus SASL authentication packages"
  ansible.builtin.package:
    name: "{{ __testing_run_postfix_packages_install_sasl_cyrus }}"
    state: "present"


- name: "Molecule | Prepare | Configure saslauthd"
  ansible.builtin.lineinfile:
    path: "{{ __testing_run_sasl_saslauthd_config_file }}"
    regexp: "{{ item['regexp'] }}"
    line: "{{ item['line'] }}"
  loop:
    - { regexp: '^START=', line: 'START=yes' }


- name: "Molecule | Prepare | Ensure existence of Cyrus SASL smtpd.conf parent directory"
  ansible.builtin.file:
    path: "{{ __testing_run_sasl_smtpd_config_file | ansible.builtin.dirname }}"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "u=rwx,g=rx,o=rx" # 0755


- name: "Molecule | Prepare | Create Cyrus SASL smtpd.conf"
  ansible.builtin.copy:
    dest: "{{ __testing_run_sasl_smtpd_config_file }}"
    content: |
      log_level: 3
      pwcheck_method: saslauthd
      mech_list: PLAIN LOGIN
    force: true
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r" # 0644


- name: "Molecule | Prepare | Ensure service state: saslauthd"
  ansible.builtin.service:
    name: "saslauthd.service"
    state: "restarted"
    enabled: true


- name: "Molecule | Prepare | Create a local test user for SMPT authentication (SASL)"
  ansible.builtin.user:
    comment: "SMPT test user"
    create_home: true
    force: true
    # Base64: am9obmRvZQ==
    name: "johndoe"
    # Security Notice: These are NOT real credentials.
    #
    # This is example configuration data intended for demonstration purposes
    # only. Reporting this as a vulnerability or data leak suggests a failure to
    # properly review automated scanning results, and may reflect poorly on your
    # professional diligence. ;-)
    #
    # Plain: Hallo123postfix__
    # Base64: SGFsbG8xMjNwb3N0Zml4X18=
    password: "$6$aLzJcqJEXjx2VTpS$SKxw.kqr.vxWw8/vkZWi7hDAICVU5WFKPjVgnM/yNCa2ES.jMN6uJGvIE0gP39ShRWovmvsd9Y51nROVnx71S/"
    remove: true
    shell: "/sbin/nologin"
    state: "present"
    system: false
    update_password: "always"
    umask: "0027"


# This would be the clean way in a real world scenario:
#
#   - name: "Molecule | Prepare | Grant Postfix's service user access to saslauthd resources (like its socket) by adding it to the sasl group (Debian)"
#     ansible.builtin.user:
#       name: "postfix"
#       groups:
#         - "sasl"
#       append: true # do not remove existing group memberships
#     when:
#       - (ansible_facts['os_family'] | lower) == 'debian'
#
# However, we have got a chicken-egg problem here as Postfix is not installed
# yet and creating it's service user upfront would tamper the installation
# testing itself. Moving the task to "converge" also feels unclean. So we picked
# the following, insecure method which seems to be OK for this testing scenario.
# Note: the permissions get resetted when saslauthd.service is restarted.
- name: "Molecule | Prepare | Grant everyone access to the saslauthd socket directory (only for test) (Debian)"
  ansible.builtin.file:
    path: "/var/run/saslauthd"
    state: "directory"
    mode: "755"
    owner: "root"
    group: "sasl"
  when:
    - (ansible_facts['os_family'] | lower) == 'debian'
