# Tasks for the Molecule verify stage: Check collection role "run" outcomes.

- name: "Molecule | Verify | Initialize the foundata.postfix.run role (without actually running it; get and expose variables)"
  ansible.builtin.include_role:
    name: "foundata.postfix.run"
    tasks_from: "init"
    public: true


- name: "Molecule | Verify | Gather playbook-specific facts"
  ansible.builtin.setup:
    gather_subset:
      - "distribution"
  when:
    - ansible_facts['distribution'] is not defined or
      ansible_facts['os_family'] is not defined


- name: "Molecule | Verify | Set some expected configuration data "
  ansible.builtin.set_fact:
    # values have to be in sync with the config set in ../converge/run-role.yml
    run_postfix_maincf_settings:
      myhostname: "smtp.example.com"
    run_postfix_relay_domains_manage: true
    run_postfix_access_manage: true
    run_postfix_access_recipient_map_tabletype: "pcre"
    run_postfix_aliases_manage: true
    run_postfix_canonical_manage: true
    run_postfix_canonical_sender_map_tabletype: "pcre"
    run_postfix_generic_manage: true
    run_postfix_generic_map_tabletype: "pcre"
    run_postfix_relocated_manage: true
    run_postfix_transport_manage: true
    run_postfix_virtual_manage: true
    run_postfix_virtual_alias_map_tabletype: "lmdb"
    run_postfix_smtp_sasl_password_manage: true
    # other testing specific values
    __testing_mastercf:
      port_smtp: 25
      port_submission: 587
      port_smtp_unusual: 2525
    __testing_telnet_executable: "/usr/bin/telnet"
    __testing_openssl_executable: "/usr/bin/openssl"
    __testing_sendmail_executable: "/usr/sbin/sendmail"
    __testing_date_executable: "/usr/bin/date"
    __testing_postqueue_executable: "/usr/sbin/postqueue"
    __testing_journalctl_executable: >-
      {{
        '/bin/journalctl'
        if (ansible_facts['distribution'] == 'Debian' and ansible_facts['distribution_major_version'] | int == 11)
        else '/usr/bin/journalctl'
      }}
    __testing_sasl_auth_username_base64: "am9obmRvZQ==" # johndoe
    __testing_sasl_auth_password_base64: "SGFsbG8xMjNwb3N0Zml4X18=" # Hallo123postfix__


- name: "Molecule | Verify | Gather service facts"
  ansible.builtin.service_facts:


- name: "Molecule | Verify | Show service facts"
  ansible.builtin.debug:
    var: ansible_facts['services']
    verbosity: 3


- name: "Molecule | Verify | Assert Postfix service is running"
  ansible.builtin.assert:
    that:
      # SysVinit is still used for Postfix on Debian ≤ 12 and Ubuntu ≤ 24.04.
      # In these cases, the systemd service state may show as "active (exited)",
      # and ansible_facts['services'] will include both SysV and systemd entries,
      # which can be misleading. Example:
      #   "postfix": {
      #       "name": "postfix",
      #       "source": "sysv",
      #       "state": "running"
      #   },
      #   "postfix.service": {
      #       "name": "postfix.service",
      #       "source": "systemd",
      #       "state": "stopped",
      #       "status": "enabled"
      #   },
      - (ansible_facts['services'][__run_postfix_postfix_servicename] is defined and
         ansible_facts['services'][__run_postfix_postfix_servicename].state == 'running')
        or
        (ansible_facts['services'][__run_postfix_postfix_servicename | regex_replace('\.service$', '')] is defined and
         ansible_facts['services'][__run_postfix_postfix_servicename | regex_replace('\.service$', '')].state == 'running')
    fail_msg: "Postfix service '{{ __run_postfix_postfix_servicename }}' is not running"
    success_msg: "Postfix service '{{ __run_postfix_postfix_servicename }}' is running"


- name: "Molecule | Verify | Set regular expression to search for warnings and errors in the journal"
  ansible.builtin.set_fact:
    __testing_postfix_regex_searchwarningerror: '(?i)\b(warning|error):'


# Exclude OpenSSL version mismatch warnings on Enterprise Linux 9/10:
# "run-time library vs. compile-time header version mismatch: OpenSSL <version> may not be compatible with OpenSSL 3.2.0"
# This warning is unavoidable when using default packages. Upgrading openssl/openssl-libs results in OpenSSL 3.5.x vs.
# Postfix compiled against 3.2.0, still triggering the warning (therefore https://access.redhat.com/solutions/7100609
# does not resolve this issue)
- name: "Molecule | Verify | Overwrite regular expression to search for warnings and errors in the journal for specific Red Hat-like platforms"
  ansible.builtin.set_fact:
    __testing_postfix_regex_searchwarningerror: '(?i)\b(warning|error):(?!.*header version mismatch: OpenSSL)'
  when:
    - (ansible_facts['os_family'] | lower) == 'redhat'
    - ansible_facts['distribution_major_version'] is defined
    - ansible_facts['distribution_major_version'] is ansible.builtin.version('10', '<=')


- name: "Molecule | Verify | Check journal for warnings or errors: Postfix"
  ansible.builtin.command:
    cmd: >
      {{ __testing_journalctl_executable }}
        --unit={{ __run_postfix_postfix_servicename | regex_replace('\.service$', '*') | ansible.builtin.quote }}
  changed_when: false
  failed_when:
    - (__testing_run_postfix_journalctlcheck_result['stdout'] is search(__testing_postfix_regex_searchwarningerror))
  register: __testing_run_postfix_journalctlcheck_result


- name: "Molecule | Verify | Capture start timestamp for journal filtering before running further tests"
  ansible.builtin.set_fact:
    __testing_postfix_verifystarttime: |-
      @{{ lookup('ansible.builtin.pipe', __testing_date_executable ~ ' ' ~ ('+%s' | ansible.builtin.quote)) }}


## Check basic service functionality (SMTP)

- name: "Molecule | Verify | Run SMTP tests: basic"
  ansible.builtin.include_tasks:
    file: "../tasks/verify/checks/smtp-basic.yml"
  vars:
    __testing_hostdata: "{{ item }}"
  when:
    __testing_hostdata is defined
  loop:
    - host: "127.0.0.1"
      port: "{{ __testing_mastercf['port_smtp'] }}"
      smtp_hostname: "{{ run_postfix_maincf_settings['myhostname'] }}"
    - host: "127.0.0.1"
      port: "{{ __testing_mastercf['port_submission'] }}"
      smtp_hostname: "{{ run_postfix_maincf_settings['myhostname'] }}"
    - host: "127.0.0.1"
      port: "{{ __testing_mastercf['port_smtp_unusual'] }}"
      smtp_hostname: "{{ run_postfix_maincf_settings['myhostname'] }}"


- name: "Molecule | Verify | Run SMTP tests: STARTTLS"
  ansible.builtin.include_tasks:
    file: "../tasks/verify/checks/smtp-starttls.yml"
  vars:
    __testing_hostdata: "{{ item }}"
  when:
    __testing_hostdata is defined
  loop:
    - host: "127.0.0.1"
      port: "{{ __testing_mastercf['port_submission'] }}"
      smtp_hostname: "{{ run_postfix_maincf_settings['myhostname'] }}"


### Check lookup table results: access

- name: "Molecule | Verify | Lookup-table 'access'"
  when:
    - run_postfix_access_manage is true
  block:

    - name: "Molecule | Verify | Read access_recipient file"
      ansible.builtin.slurp:
        src: "{{ __run_postfix_table_access_recipient_file }}"
      register: __testing_access_recipient_file


    - name: "Molecule | Verify | Assert access_recipient file contents"
      ansible.builtin.assert:
        that:
          - "'/^abuse@.+/i\t\t\tOK' in (__testing_access_recipient_file.content | b64decode)" # noqa: no-tabs
          - "'/^do-not-reply@example.com$/im\tREJECT' in (__testing_access_recipient_file.content | b64decode)" # noqa: no-tabs
        fail_msg: "Expected, formatted content not found in {{ __run_postfix_table_access_recipient_file }}"
        success_msg: "Expected, formatted content found in {{ __run_postfix_table_access_recipient_file }}"


    - name: "Molecule | Verify | Check if access_recipient database file exists / handler worked"
      ansible.builtin.stat:
        path: |-
          {{ __run_postfix_table_access_recipient_file ~ '.' ~
            ('db' if run_postfix_access_recipient_map_tabletype in ['hash', 'btree']
                  else ('dir' if run_postfix_access_recipient_map_tabletype in ['dbm', 'sdbm']
                              else run_postfix_access_recipient_map_tabletype)) }}
        get_attributes: false
        get_checksum: false
      when:
        - run_postfix_access_recipient_map_tabletype in ['btree', 'dbm', 'hash', 'lmdb', 'sdbm']
      failed_when:
        - __testing_access_db_stat['stat']['exists'] is false
      register: __testing_access_db_stat


    - name: "Molecule | Verify | Read access_sender file"
      ansible.builtin.slurp:
        src: "{{ __run_postfix_table_access_sender_file }}"
      register: __testing_access_sender_file


    - name: "Molecule | Verify | Assert access_sender file contents"
      ansible.builtin.assert:
        that:
          - "'defines address rules used by Postfix to define sender access' in (__testing_access_sender_file.content | b64decode)" # noqa: no-tabs
        fail_msg: "Expected, formatted content not found in {{ __run_postfix_table_access_sender_file }}"
        success_msg: "Expected, formatted content found in {{ __run_postfix_table_access_sender_file }}"


    - name: "Molecule | Verify | Check if access_sender database file exists / handler worked"
      ansible.builtin.stat:
        path: |-
          {{ __run_postfix_table_access_sender_file ~ '.' ~
            ('db' if run_postfix_access_sender_map_tabletype in ['hash', 'btree']
                  else ('dir' if run_postfix_access_sender_map_tabletype in ['dbm', 'sdbm']
                              else run_postfix_access_sender_map_tabletype)) }}
        get_attributes: false
        get_checksum: false
      when:
        - run_postfix_access_sender_map_tabletype in ['btree', 'dbm', 'hash', 'lmdb', 'sdbm']
      failed_when:
        - __testing_access_db_stat['stat']['exists'] is false
      register: __testing_access_db_stat


### Check lookup table results: aliases

- name: "Molecule | Verify | Lookup-table 'aliases'"
  when:
    - run_postfix_aliases_manage is true
  block:

    - name: "Molecule | Verify | Read aliases file"
      ansible.builtin.slurp:
        src: "{{ __run_postfix_table_aliases_file }}"
      register: __testing_aliases_file


    - name: "Molecule | Verify | Assert aliases file contents"
      ansible.builtin.assert:
        that:
          - "'ANSIBLE MANAGED BLOCK' in (__testing_aliases_file.content | b64decode)" # noqa: no-tabs
          - "'molecule:\t\t\troot' in (__testing_aliases_file.content | b64decode)" # noqa: no-tabs
        fail_msg: "Expected, formatted content not found in {{ __run_postfix_table_aliases_file }}"
        success_msg: "Expected, formatted content found in {{ __run_postfix_table_aliases_file }}"


    - name: "Molecule | Verify | Check if aliases database file exists / handler worked"
      ansible.builtin.stat:
        path: |-
          {{ __run_postfix_table_aliases_file ~ '.' ~
            ('db' if run_postfix_aliases_map_tabletype in ['hash', 'btree']
                  else ('dir' if run_postfix_aliases_map_tabletype in ['dbm', 'sdbm']
                              else run_postfix_aliases_map_tabletype)) }}
        get_attributes: false
        get_checksum: false
      when:
        - run_postfix_aliases_map_tabletype in ['btree', 'dbm', 'hash', 'lmdb', 'sdbm']
      failed_when:
        - __testing_aliases_db_stat['stat']['exists'] is false
      register: __testing_aliases_db_stat


### Check lookup table results: canonical

- name: "Molecule | Verify | Lookup-table 'canonical'"
  when:
    - run_postfix_canonical_manage is true
  block:

    - name: "Molecule | Verify | Read canonical_recipient file"
      ansible.builtin.slurp:
        src: "{{ __run_postfix_table_canonical_recipient_file }}"
      register: __testing_canonical_recipient_file


    - name: "Molecule | Verify | Assert canonical_recipient file contents"
      ansible.builtin.assert:
        that:
          - "'old.name@example.com\t\tnew.name@example.com' in (__testing_canonical_recipient_file.content | b64decode)" # noqa: no-tabs
          - "'@old.example.com\t\t@example.com' in (__testing_canonical_recipient_file.content | b64decode)" # noqa: no-tabs
        fail_msg: "Expected, formatted content not found in {{ __run_postfix_table_canonical_recipient_file }}"
        success_msg: "Expected, formatted content found in {{ __run_postfix_table_canonical_recipient_file }}"


    - name: "Molecule | Verify | Check if canonical_recipient database file exists / handler worked"
      ansible.builtin.stat:
        path: |-
          {{ __run_postfix_table_canonical_recipient_file ~ '.' ~
            ('db' if run_postfix_canonical_recipient_map_tabletype in ['hash', 'btree']
                  else ('dir' if run_postfix_canonical_recipient_map_tabletype in ['dbm', 'sdbm']
                              else run_postfix_canonical_recipient_map_tabletype)) }}
        get_attributes: false
        get_checksum: false
      when:
        - run_postfix_canonical_recipient_map_tabletype in ['btree', 'dbm', 'hash', 'lmdb', 'sdbm']
      failed_when:
        - __testing_canonical_db_stat['stat']['exists'] is false
      register: __testing_canonical_db_stat


    - name: "Molecule | Verify | Read canonical_sender file"
      ansible.builtin.slurp:
        src: "{{ __run_postfix_table_canonical_sender_file }}"
      register: __testing_canonical_sender_file


    - name: "Molecule | Verify | Assert canonical_sender file contents"
      ansible.builtin.assert:
        that:
          - "'/^(.+)@alias1.example.com$/im\t$1@example.com' in (__testing_canonical_sender_file.content | b64decode)" # noqa: no-tabs
          - "'/^(.+)@alias2.example.com$/im\tdo-not-reply@example.com' in (__testing_canonical_sender_file.content | b64decode)" # noqa: no-tabs
        fail_msg: "Expected, formatted content not found in {{ __run_postfix_table_canonical_sender_file }}"
        success_msg: "Expected, formatted content found in {{ __run_postfix_table_canonical_sender_file }}"


    - name: "Molecule | Verify | Check if canonical_sender database file exists / handler worked"
      ansible.builtin.stat:
        path: |-
          {{ __run_postfix_table_canonical_sender_file ~ '.' ~
            ('db' if run_postfix_canonical_sender_map_tabletype in ['hash', 'btree']
                  else ('dir' if run_postfix_canonical_sender_map_tabletype in ['dbm', 'sdbm']
                              else run_postfix_canonical_sender_map_tabletype)) }}
        get_attributes: false
        get_checksum: false
      when:
        - run_postfix_canonical_sender_map_tabletype in ['btree', 'dbm', 'hash', 'lmdb', 'sdbm']
      failed_when:
        - __testing_canonical_db_stat['stat']['exists'] is false
      register: __testing_canonical_db_stat


### Check lookup table results: relocated

- name: "Molecule | Verify | Lookup-table 'relocated'"
  when:
    - run_postfix_relocated_manage is true
  block:

    - name: "Molecule | Verify | Read relocated file"
      ansible.builtin.slurp:
        src: "{{ __run_postfix_table_relocated_file }}"
      register: __testing_relocated_file


    - name: "Molecule | Verify | Assert relocated file contents"
      ansible.builtin.assert:
        that:
          - "'user.old@example.com\t\tuser.new@example.net' in (__testing_relocated_file.content | b64decode)" # noqa: no-tabs
          - "'user345@example.com\t\tto ACME Inc.; Please contact him there now.' in (__testing_relocated_file.content | b64decode)" # noqa: no-tabs
        fail_msg: "Expected, formatted content not found in {{ __run_postfix_table_relocated_file }}"
        success_msg: "Expected, formatted content found in {{ __run_postfix_table_relocated_file }}"


    - name: "Molecule | Verify | Check if relocated database file exists / handler worked"
      ansible.builtin.stat:
        path: |-
          {{ __run_postfix_table_relocated_file ~ '.' ~
            ('db' if run_postfix_relocated_map_tabletype in ['hash', 'btree']
                  else ('dir' if run_postfix_relocated_map_tabletype in ['dbm', 'sdbm']
                              else run_postfix_relocated_map_tabletype)) }}
        get_attributes: false
        get_checksum: false
      when:
        - run_postfix_relocated_map_tabletype in ['btree', 'dbm', 'hash', 'lmdb', 'sdbm']
      failed_when:
        - __testing_relocated_db_stat['stat']['exists'] is false
      register: __testing_relocated_db_stat


### Check lookup table results: generic

- name: "Molecule | Verify | Lookup-table 'generic'"
  when:
    - run_postfix_generic_manage is true
  block:

    - name: "Molecule | Verify | Read generic file"
      ansible.builtin.slurp:
        src: "{{ __run_postfix_table_generic_file }}"
      register: __testing_generic_file


    - name: "Molecule | Verify | Assert generic file contents"
      ansible.builtin.assert:
        that:
          - "'/^(.+)@ad\\.local$/im\t\t$1@example.com' in (__testing_generic_file.content | b64decode)" # noqa: no-tabs
        fail_msg: "Expected, formatted content not found in {{ __run_postfix_table_generic_file }}"
        success_msg: "Expected, formatted content found in {{ __run_postfix_table_generic_file }}"


    - name: "Molecule | Verify | Check if generic database file exists / handler worked"
      ansible.builtin.stat:
        path: |-
          {{ __run_postfix_table_generic_file ~ '.' ~
            ('db' if run_postfix_generic_map_tabletype in ['hash', 'btree']
                  else ('dir' if run_postfix_generic_map_tabletype in ['dbm', 'sdbm']
                              else run_postfix_generic_map_tabletype)) }}
        get_attributes: false
        get_checksum: false
      when:
        - run_postfix_generic_map_tabletype in ['btree', 'dbm', 'hash', 'lmdb', 'sdbm']
      failed_when:
        - __testing_generic_db_stat['stat']['exists'] is false
      register: __testing_generic_db_stat


### Check lookup table results: transport

- name: "Molecule | Verify | Lookup-table 'transport'"
  when:
    - run_postfix_transport_manage is true
  block:

    - name: "Molecule | Verify | Read transport file"
      ansible.builtin.slurp:
        src: "{{ __run_postfix_table_transport_file }}"
      register: __testing_transport_file


    - name: "Molecule | Verify | Assert transport file contents"
      ansible.builtin.assert:
        that:
          - "'example.org\t\t\tlmtp:unix:/var/spool/postfix/private/lmtp-dovecot' in (__testing_transport_file.content | b64decode)" # noqa: no-tabs
          - "'foo.example.org\t\t\tsmtp:[mailrelay.foo.example.org]:123' in (__testing_transport_file.content | b64decode)" # noqa: no-tabs
        fail_msg: "Expected, formatted content not found in {{ __run_postfix_table_transport_file }}"
        success_msg: "Expected, formatted content found in {{ __run_postfix_table_transport_file }}"


    - name: "Molecule | Verify | Check if transport database file exists / handler worked"
      ansible.builtin.stat:
        path: |-
          {{ __run_postfix_table_transport_file ~ '.' ~
            ('db' if run_postfix_transport_map_tabletype in ['hash', 'btree']
                  else ('dir' if run_postfix_transport_map_tabletype in ['dbm', 'sdbm']
                              else run_postfix_transport_map_tabletype)) }}
        get_attributes: false
        get_checksum: false
      when:
        - run_postfix_transport_map_tabletype in ['btree', 'dbm', 'hash', 'lmdb', 'sdbm']
      failed_when:
        - __testing_transport_db_stat['stat']['exists'] is false
      register: __testing_transport_db_stat


### Check lookup table results: virtual

- name: "Molecule | Verify | Lookup-table 'virtual'"
  when:
    - run_postfix_virtual_manage is true
  block:

    - name: "Molecule | Verify | Read virtual file"
      ansible.builtin.slurp:
        src: "{{ __run_postfix_table_virtual_file }}"
      register: __testing_virtual_file


    - name: "Molecule | Verify | Assert virtual file contents"
      ansible.builtin.assert:
        that:
          - "'distribution@example.com\tuser1@actual-destination.example.com, user2@actual-destination.example.com, user3@actual-destination.example.com, user3@actual-destination.example.com' in (__testing_virtual_file.content | b64decode)" # noqa: no-tabs yaml[line-length]
          - "'admin@example.com\t\tadmin@actual-destination.example.com' in (__testing_virtual_file.content | b64decode)" # noqa: no-tabs
        fail_msg: "Expected, formatted content not found in {{ __run_postfix_table_virtual_file }}"
        success_msg: "Expected, formatted content found in {{ __run_postfix_table_virtual_file }}"


    - name: "Molecule | Verify | Check if virtual database file exists / handler worked"
      ansible.builtin.stat:
        path: |-
          {{ __run_postfix_table_virtual_file ~ '.' ~
            ('db' if run_postfix_virtual_alias_map_tabletype in ['hash', 'btree']
                  else ('dir' if run_postfix_virtual_alias_map_tabletype in ['dbm', 'sdbm']
                              else run_postfix_virtual_alias_map_tabletype)) }}
        get_attributes: false
        get_checksum: false
      when:
        - run_postfix_virtual_alias_map_tabletype in ['btree', 'dbm', 'hash', 'lmdb', 'sdbm']
      failed_when:
        - __testing_virtual_db_stat['stat']['exists'] is false
      register: __testing_virtual_db_stat


    - name: "Molecule | Verify | Read virtual file (alias domains)"
      ansible.builtin.slurp:
        src: "{{ __run_postfix_table_virtual_aliasdomains_file }}"
      register: __testing_virtual_aliasdomains_file


    - name: "Molecule | Verify | Assert virtual file (alias domains) contents"
      ansible.builtin.assert:
        that:
          - "'alias2.example.com\t\tvirtual' in (__testing_virtual_aliasdomains_file.content | b64decode)" # noqa: no-tabs
          - "'ad.local\t\t\tvirtual' in (__testing_virtual_aliasdomains_file.content | b64decode)" # noqa: no-tabs
        fail_msg: "Expected, formatted content not found in {{ __run_postfix_table_virtual_aliasdomains_file }}"
        success_msg: "Expected, formatted content found in {{ __run_postfix_table_virtual_aliasdomains_file }}"


    - name: "Molecule | Verify | Check if virtual database file exists / handler worked"
      ansible.builtin.stat:
        path: |-
          {{ __run_postfix_table_virtual_aliasdomains_file ~ '.' ~
            ('db' if run_postfix_virtual_aliasdomains_list_tabletype in ['hash', 'btree']
                  else ('dir' if run_postfix_virtual_aliasdomains_list_tabletype in ['dbm', 'sdbm']
                              else run_postfix_virtual_aliasdomains_list_tabletype)) }}
        get_attributes: false
        get_checksum: false
      when:
        - run_postfix_virtual_aliasdomains_list_tabletype in ['btree', 'dbm', 'hash', 'lmdb', 'sdbm']
      failed_when:
        - __testing_virtual_db_stat['stat']['exists'] is false
      register: __testing_virtual_db_stat


### Check SMTP SASL password credentials

- name: "Molecule | Verify | SMTP SASL password credentials"
  when:
    - run_postfix_smtp_sasl_password_manage is true
  block:

    - name: "Molecule | Verify | Read SMTP SASL password credentials file"
      ansible.builtin.slurp:
        src: "{{ __run_postfix_smtpsaslpasswordmap_file }}"
      register: __testing_smtp_sasl_password_file


    - name: "Molecule | Verify | Assert SMTP SASL password credentials file contents"
      ansible.builtin.assert:
        that:
          - "'[mailrelay.foo.example.org]:123\tuser123:pwd-1fdd4-bbbaf3' in (__testing_smtp_sasl_password_file.content | b64decode)" # noqa: no-tabs
          - "'[relay.example.net]:25\t\tjane:Passw0rd-gcIJcft0t' in (__testing_smtp_sasl_password_file.content | b64decode)" # noqa: no-tabs
        fail_msg: "Expected, formatted content not found in {{ __run_postfix_smtpsaslpasswordmap_file }}"
        success_msg: "Expected, formatted content found in {{ __run_postfix_smtpsaslpasswordmap_file }}"


    - name: "Molecule | Verify | Check if SMTP SASL password credentials database file exists / handler worked"
      ansible.builtin.stat:
        path: |-
          {{ __run_postfix_smtpsaslpasswordmap_file ~ '.' ~
            ('db' if run_postfix_smtp_sasl_password_map_tabletype in ['hash', 'btree']
                  else ('dir' if run_postfix_smtp_sasl_password_map_tabletype in ['dbm', 'sdbm']
                              else run_postfix_smtp_sasl_password_map_tabletype)) }}
        get_attributes: false
        get_checksum: false
      when:
        - run_postfix_smtp_sasl_password_map_tabletype in ['btree', 'dbm', 'hash', 'lmdb', 'sdbm']
      failed_when:
        - __testing_smtp_sasl_password_db_stat['stat']['exists'] is false
      register: __testing_smtp_sasl_password_db_stat


### Check local mail delivery

- name: "Molecule | Verify | Send local test email: set subject line"
  ansible.builtin.set_fact:
    __testing_postfix_local_email_subject: >-
      Test email from Ansible
      ({{ inventory_hostname }}@{{ lookup('ansible.builtin.pipe', __testing_date_executable ~ ' ' ~ ('+%s' | ansible.builtin.quote)) }})


- name: "Molecule | Verify | Send local test email: add email to queue (molecule alias -> root)"
  ansible.builtin.shell:
    cmd: |
      set -u # Fail on unset vars
      set -o pipefail # Fail if any pipe cmd fails
      {{ __testing_sendmail_executable }} -i -t <<-'EOF'
      From: test@{{ run_postfix_maincf_settings['myhostname'] }}
      To: molecule
      Subject: {{ __testing_postfix_local_email_subject }}
      Content-Type: text/plain; charset=UTF-8

      This is a test email intended to be sent with Postfix to a local alias of root.
      EOF

      sleep 3 # Wait briefly for queueing
      exit 0
    executable: "/bin/bash" # Support for other shells untested (so far)
  changed_when: true
  failed_when:
    - __testing_sendmail_local_result['rc'] != 0
  register: __testing_sendmail_local_result


- name: "Molecule | Verify | Send local test email: Check root mailbox for delivered mail"
  ansible.builtin.shell:
    cmd: |
      set -u # Fail on unset vars
      set -o pipefail # Fail if any pipe cmd fails

      # /var/spool/mail is usually a symlink to /var/mail (or vice versa, depending on the distribution)
      if ! grep -l {{ __testing_postfix_local_email_subject | ansible.builtin.quote }} "/var/mail/root"
      then
        exit 1
      else
        exit 0
      fi
    executable: "/bin/bash" # Support for other shells untested (so far)
  changed_when: false
  failed_when:
    - __testing_check_root_mail['rc'] != 0
  register: __testing_check_root_mail


- name: "Molecule | Verify | Send local test email: Assert email was delivered to root"
  ansible.builtin.assert:
    that:
      - __testing_check_root_mail is succeeded
    fail_msg: "Email was not delivered to root's mailbox"
    success_msg: "Email was successfully delivered to root's mailbox"


### Check if sending emails to a real destination via Internet works

- name: "Molecule | Verify | Send SASL authenticated test email: check for environment variables"
  ansible.builtin.set_fact:
    __testing_missing_envvars_sendmail: "{{ __testing_missing_envvars_sendmail | default([]) + [item] }}"
  when:
    - lookup('env', item, default='') == ''
  changed_when: false # noqa: no-changed-when
  loop:
    - "TEST_POSTFIX_MAILFROM_EMAIL"
    - "TEST_POSTFIX_MAILTO_EMAIL"


- name: "Molecule | Verify | Send SASL authenticated test email: show missing environment variables (if any)"
  ansible.builtin.debug:
    msg: >
      Tests regarding sending an email to an external address will be skipped,
      required environment variables are missing or invalid: {{ __testing_missing_envvars_sendmail | join(', ') }}.
  changed_when: false # noqa: no-changed-when
  when:
    - __testing_missing_envvars_sendmail is defined
    - __testing_missing_envvars_sendmail | length > 0


- name: "Molecule | Verify | Send SASL authenticated test email: gather environment variables"
  ansible.builtin.set_fact:
    __testing_mailfrom_email: "{{ lookup('env', 'TEST_POSTFIX_MAILFROM_EMAIL') | default(omit, true) }}"
    __testing_mailfrom_name: "{{ lookup('env', 'TEST_POSTFIX_MAILFROM_NAME', default='John Doe') }}"
    __testing_mailto_email: "{{ lookup('env', 'TEST_POSTFIX_MAILTO_EMAIL') | default(omit, true) }}"
    __testing_mailto_name: "{{ lookup('env', 'TEST_POSTFIX_MAILTO_NAME', default='Jane Doe') }}"
  when:
    - __testing_missing_envvars_sendmail is not defined or
      (__testing_missing_envvars_sendmail | length <= 0)


- name: "Molecule | Verify | Send SASL authenticated test email"
  when:
    - __testing_mailfrom_email is defined
    - __testing_mailto_email is defined
    - __testing_missing_envvars_sendmail is not defined or
      (__testing_missing_envvars_sendmail | length <= 0)
  block:

    - name: "Molecule | Verify | Send SASL authenticated test email: add email to queue"
      ansible.builtin.expect:
        command: >
            {{ __testing_telnet_executable }} 127.0.0.1 {{ __testing_mastercf['port_smtp'] | ansible.builtin.quote }}
        responses:
          '(?i)220.*\r?\n': "EHLO {{ run_postfix_maincf_settings['myhostname'] }}"
          '(?i)250 .*\r?\n':
            - "AUTH LOGIN"
            - "RCPT TO: <{{ __testing_mailto_email }}>"
            - "DATA"
            - "QUIT"
          '(?i)354.*\r?\n': "From: \"{{ __testing_mailfrom_name }}\" <{{ __testing_mailfrom_email }}>\r\nTo: \"{{ __testing_mailto_name }}\" <{{ __testing_mailto_email }}>\r\nSubject: Test email from Ansible ({{ inventory_hostname }})\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nThis is a test email intended to be sent with Postfix to an external address\r\n.\r\n" # noqa: yaml[line-length]
          '(?i)334.*\r?\n':
            - "{{ __testing_sasl_auth_username_base64 }}"
            - "{{ __testing_sasl_auth_password_base64 }}"
          '(?i)235.*\r?\n': "MAIL FROM: <{{ __testing_mailfrom_email }}>"
          '(?i)554.*\r?\n': "QUIT"
          '(?i)221.*\r?\n': ""
        timeout: 5
      changed_when: false
      failed_when:
        # Most (not all) versions of telnet return exit status 1 if the
        # connection was closed by the host after QUIT which is expected
        # in this case.
        - __testing_run_postfix_rcpttoexternal_result['rc'] > 1
      register: __testing_run_postfix_rcpttoexternal_result


    - name: "Molecule | Verify | Assert correct answers: Send SASL authenticated test email"
      ansible.builtin.assert:
        that:
          # Most (not all) versions of telnet return exit status 1 if the
          # connection was closed by the host after QUIT which is expected
          # in this case.
          #- __testing_run_postfix_rcpttoexternal_result is succeeded
          - ('220 ' ~ run_postfix_maincf_settings['myhostname'] ~ ' ESMTP') in __testing_run_postfix_rcpttoexternal_result['stdout']
          - ('250 ') in __testing_run_postfix_rcpttoexternal_result['stdout']
          - ('221 ') in __testing_run_postfix_rcpttoexternal_result['stdout']
          - ('235 ') in __testing_run_postfix_rcpttoexternal_result['stdout']
          - ('Authentication successful') in __testing_run_postfix_rcpttoexternal_result['stdout']
          - ('queued as') in __testing_run_postfix_rcpttoexternal_result['stdout']
        fail_msg: "Send SASL authenticated test email: Expected proper responses to SMTP commands"


    - name: "Molecule | Verify | Send SASL authenticated test email: Check journal for warnings or errors logged"
      ansible.builtin.command:
        cmd: >
          {{ __testing_journalctl_executable }}
            --since={{ __testing_postfix_verifystarttime | ansible.builtin.quote }}
            --unit={{ __run_postfix_postfix_servicename | regex_replace('\.service$', '*') | ansible.builtin.quote }}
      changed_when: false
      failed_when:
        # Not searching for the following  because test emails are likely to be
        # bounced/deferred by spam filters when the testing infrastructure uses
        # non-static IP addresses etc. pp. and other tests here are creating NDRs:
        #  '(?i)status=(bounced|deferred)'
        #  '(?i)sender non-delivery notification'
        - (__testing_run_postfix_journalctlcheck_result['rc'] > 0) or
          (__testing_run_postfix_journalctlcheck_result['stdout'] is search(__testing_postfix_regex_searchwarningerror)) or
          (__testing_run_postfix_journalctlcheck_result['stdout'] is search('(?i)connection refused')) or
          (__testing_run_postfix_journalctlcheck_result['stdout'] is search('(?i)relayhost configuration problem'))
      register: __testing_run_postfix_journalctlcheck_result


    - name: "Molecule | Verify | Send SASL authenticated test email: Check mail queue for transport issues"
      ansible.builtin.command:
        cmd: |-
          {{ __testing_postqueue_executable }} -p
      changed_when: false
      failed_when:
        - (__testing_run_postfix_queuecheck_result['rc'] > 0) or
          (__testing_run_postfix_queuecheck_result['stdout'] is search('(?i)mail transport unavailable')) or
          (__testing_run_postfix_queuecheck_result['stdout'] is search('(?i)connection (timed out|refused)')) or
          (__testing_run_postfix_queuecheck_result['stdout'] is search('(?i)host or domain name not found')) or
          (__testing_run_postfix_queuecheck_result['stdout'] is search('(?i)server certificate not verified')) or
          (__testing_run_postfix_queuecheck_result['stdout'] is search('(?i)authentication failed')) or
          (__testing_run_postfix_queuecheck_result['stdout'] is search('(?i)relay access denied')) or
          (__testing_run_postfix_queuecheck_result['stdout'] is search('(?i)network is unreachable')) or
          (__testing_run_postfix_queuecheck_result['stdout'] is search('(?i)no route to host')) or
          (__testing_run_postfix_queuecheck_result['stdout'] is search('(?i)service unavailable'))
      register: __testing_run_postfix_queuecheck_result


    - name: "Molecule | Verify | Assert email is found in queue"
      ansible.builtin.assert:
        that:
          - __testing_run_postfix_journalctlcheck_result is succeeded
          - __testing_run_postfix_journalctlcheck_result['stdout'] is search('(?i)postfix/qmgr.+from=<' ~ __testing_mailfrom_email ~ '>')
          - __testing_run_postfix_journalctlcheck_result['stdout'] is search('(?i)postfix/smtp.+to=<' ~ __testing_mailto_email ~ '>')
        fail_msg: "Test email for queue check was not found in Postfix queue"
        success_msg: "Test email for queue check was successfully found in Postfix queue"


### Final check of logs before running tests triggering errors (like non-delivery reports (NDR))

- name: "Molecule | Verify | Check journal for warnings or errors logged during verify: Postfix"
  ansible.builtin.command:
    cmd: >
      {{ __testing_journalctl_executable }}
        --since={{ __testing_postfix_verifystarttime | ansible.builtin.quote }}
        --unit={{ __run_postfix_postfix_servicename | regex_replace('\.service$', '*') | ansible.builtin.quote }}
  changed_when: false
  failed_when:
    - (__testing_run_postfix_journalctlcheck_result['rc'] > 0) or
      (__testing_run_postfix_journalctlcheck_result['stdout'] is search(__testing_postfix_regex_searchwarningerror))
  register: __testing_run_postfix_journalctlcheck_result


### Check relocated non-delivery report (NDR)

- name: "Molecule | Verify | Send test email to relocated recipient(s): add email to queue"
  ansible.builtin.shell:
    cmd: |
      set -u # Fail on unset vars
      set -o pipefail # Fail if any pipe cmd fails
      {{ __testing_sendmail_executable }} -i -t <<-'EOF'
      From: root
      To: user345@example.com
      Subject: Test email from Ansible to get a relocated NDR ({{ inventory_hostname }}@{{ lookup('ansible.builtin.pipe', __testing_date_executable ~ ' ' ~ ('+%s' | ansible.builtin.quote)) }})
      Content-Type: text/plain; charset=UTF-8

      This is a test email intended to generate a Email non-delivery report (NDR)
      with additional relocated information.
      EOF

      sleep 3 # Wait briefly for queueing
      sleep 3 # Wait briefly for NDR
      exit 0
    executable: "/bin/bash" # Support for other shells untested (so far)
  changed_when: true
  failed_when:
    - __testing_sendmail_relocated_recipient_result['rc'] != 0
  register: __testing_sendmail_relocated_recipient_result


- name: "Molecule | Verify | Send SASL authenticated test email: Check journal for 'User has moved' bounce"
  ansible.builtin.command:
    cmd: >
      {{ __testing_journalctl_executable }}
        --since={{ __testing_postfix_verifystarttime | ansible.builtin.quote }}
        --unit={{ __run_postfix_postfix_servicename | regex_replace('\.service$', '*') | ansible.builtin.quote }}
  changed_when: false
  failed_when:
    - (__testing_run_postfix_journalctlcheck_result['rc'] > 0) or
      not (__testing_run_postfix_journalctlcheck_result['stdout'] is search('(?i)status=bounced.*User has moved to'))
  register: __testing_run_postfix_journalctlcheck_result


- name: "Molecule | Verify | Send test email to relocated recipient(s): Check root mailbox for non-delivery report (NDR)"
  ansible.builtin.shell:
    cmd: |
      set -u # Fail on unset vars
      set -o pipefail # Fail if any pipe cmd fails

      # /var/spool/mail is usually a symlink to /var/mail (or vice versa, depending on the distribution)
      if ! grep -l "User has moved to" "/var/mail/root"
      then
        exit 1
      else
        exit 0
      fi
    executable: "/bin/bash" # Support for other shells untested (so far)
  changed_when: false
  failed_when:
    - __testing_check_relocated_mail['rc'] != 0
  register: __testing_check_relocated_mail


### Check if relay access is denied for deny-listed or otherwise blocked recipients

- name: "Molecule | Verify | Lookup-table 'access': Initiate SASL authenticated RCPT TO a deny-listed address"
  ansible.builtin.expect:
    command: >
        {{ __testing_telnet_executable }} 127.0.0.1 {{ __testing_mastercf['port_smtp'] | ansible.builtin.quote }}
    responses:
      '(?i)220.*\r?\n': "EHLO {{ run_postfix_maincf_settings['myhostname'] }}"
      '(?i)250 .*\r?\n':
        - "AUTH LOGIN"
        - "RCPT TO: <burned@example.com>"
        - "QUIT"
      '(?i)334.*\r?\n':
        - "{{ __testing_sasl_auth_username_base64 }}"
        - "{{ __testing_sasl_auth_password_base64 }}"
      '(?i)235.*\r?\n': "MAIL FROM: <root@example.com>"
      '(?i)554.*\r?\n': "QUIT"
      '(?i)221.*\r?\n': ""
    timeout: 5
  changed_when: false
  failed_when:
    # Most (not all) versions of telnet return exit status 1 if the
    # connection was closed by the host after QUIT which is expected
    # in this case.
    - __testing_run_postfix_rcpttodeny_result['rc'] > 1
  register: __testing_run_postfix_rcpttodeny_result


- name: "Molecule | Verify | Assert correct answers: Initiate SASL authenticated RCPT TO a deny-listed address"
  ansible.builtin.assert:
    that:
      # Most (not all) versions of telnet return exit status 1 if the
      # connection was closed by the host after QUIT which is expected
      # in this case.
      # - __testing_run_postfix_rcpttodeny_result is succeeded
      - ('220 ' ~ run_postfix_maincf_settings['myhostname'] ~ ' ESMTP') in __testing_run_postfix_rcpttodeny_result['stdout']
      - ('250 ') in __testing_run_postfix_rcpttodeny_result['stdout']
      - ('221 ') in __testing_run_postfix_rcpttodeny_result['stdout']
      - ('235 ') in __testing_run_postfix_rcpttodeny_result['stdout']
      - ('Authentication successful') in __testing_run_postfix_rcpttodeny_result['stdout']
      - ('554 ') in __testing_run_postfix_rcpttodeny_result['stdout']
      - ('Recipient address rejected') in __testing_run_postfix_rcpttodeny_result['stdout']
      - ('Access denied') in __testing_run_postfix_rcpttodeny_result['stdout']
    fail_msg: "Initiate RCPT TO a deny-listed address: Expected proper responses to SMTP commands"
