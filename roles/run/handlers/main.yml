# Handlers: Tasks that are triggered and run only when notified.

---

- name: "Handlers | Update Postfix file-based databases / lookup tables (postmap)"
  # The command or shell module is used here. This approach is justified:
  #
  # - No built-in Ansible module provides a direct way to interact with the
  #   used command.
  # - Inline templating allows for safe and efficient parameter handling,
  #   avoiding the need for multiple additional tasks with little to no benefit.
  #
  # Notes on the command or script itself:
  #
  # See the official documentation for a explanation of the parameters:
  # https://www.postfix.org/postmap.1.html
  ansible.builtin.command:
    cmd: >
      {{ __run_postfix_postmap_executable }}
      {{ item['value'] | regex_replace('^(hash):(.*)$', '\2') | ansible.builtin.quote }}
  loop: "{{ __run_postfix_merged_maincf_settings | dict2items }}"
  when:
    - __run_postfix_merged_maincf_settings is defined
    # Notes:
    # - Files where other comands have to be used ("newaliases" or "postalias")
    #   are excluded
    # - See https://www.postfix.org/DATABASE_README.html#types (look out for
    #   "files are created with the" string) to maintain the list in
    #   regex_search('^(btree| ...
    - ((item['key'] == 'relay_domains') or
       (item['key'] | regex_search('_maps$')) or
       (item['value'] | regex_search('^(btree|btree|dbm|hash|lmdb|sdbm):/.+'))) and
      (item['key'] != 'alias_maps') and
      (item['key'] != 'alias_database')
  changed_when:
    # The command does not output anything useful to detect changes and rewrites
    # the .db file in any successful case, even if the input data was not
    # changed, so there is a change in any case. This is no idempotence problem
    # as this handler should only get triggered when Postfix configuration has
    # actually changed.
    - __run_postfix_postmap_result['rc'] == 0
  register: __run_postfix_postmap_result
  listen: "run_postfix: update lookup tables"


- name: "Handlers | Update aliases for smtpd (postalias)"
  # The command or shell module is used here. This approach is justified:
  #
  # - No built-in Ansible module provides a direct way to interact with the
  #   used command.
  # - Inline templating allows for safe and efficient parameter handling,
  #   avoiding the need for multiple additional tasks with little to no benefit.
  #
  # Notes on the command or script itself:
  #
  # See the official documentation for a explanation of the parameters:
  # https://www.postfix.org/aliases.5.html
  ansible.builtin.command:
    # The "newaliases" executable usually only supports "hash:" databases, so
    # use "postalias" instead.
    cmd: >
      {{ __run_postfix_postalias_executable }}
      {{ __run_postfix_merged_maincf_settings['alias_database'] |
         default(__run_postfix_default_lookuptabletype ~ ':/etc/aliases') |
         regex_replace('^(hash):(.*)$', '\2') | ansible.builtin.quote }}
  changed_when:
    # The command does not output anything useful to detect changes and rewrites
    # the .db file in any successful case, even if the input data was not
    # changed, so there is a change in any case. This is no idempotence problem
    # as this handler should only get triggered when Postfix configuration has
    # actually changed.
    - __run_postfix_newaliases_result['rc'] == 0
  register: __run_postfix_newaliases_result
  listen: "run_postfix: update aliases"


- name: "Handlers | postfix.service restart"
  ansible.builtin.systemd_service:
    name: "{{ __run_postfix_postfix_servicename }}"
    state: "restarted"
  listen: "run_postfix: restart postfix.service"
  when:
    - run_postfix_service_state != 'unmanaged'


- name: "Handlers | postfix.service reload"
  ansible.builtin.systemd_service:
    name: "{{ __run_postfix_postfix_servicename }}"
    state: "reloaded"
  listen: "run_postfix: reload postfix.service"
  when:
    - run_postfix_service_state != 'unmanaged'
