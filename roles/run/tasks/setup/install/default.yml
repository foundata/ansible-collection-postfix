# Install: Manage basic resource setup, such as packages or service users.

---

- name: "Setup | Install | Default | Remove unwanted packages (e.g., to prevent conflicts or resolve incompatibilities)"
  ansible.builtin.package:
    name: "{{ __run_postfix_packages_removal }}"
    state: "absent"
  when:
    - __run_postfix_packages_removal is defined
    - (__run_postfix_packages_removal | length) > 0


- name: "Setup | Install | Default | Install or upgrade packages"
  ansible.builtin.package:
    name: "{{ __run_postfix_packages_install }}"
    state: "{{ 'latest' if run_postfix_autoupgrade else 'present' }}"
  when:
    - __run_postfix_packages_install is defined
    - (__run_postfix_packages_install | length) > 0
  register: __run_postfix_package_install_result # to decide if a handler flush (config/default.yml) is necessary


- name: "Setup | Install | Default | Print additional map backends (extracted from main.cf and default settings)"
  ansible.builtin.debug:
    msg: "{{ lookup('template', 'helper_list_map_backends.j2') }}"
    verbosity: 4


- name: "Setup | Install | Default | Install or upgrade additional packages for used map backends"
  ansible.builtin.package:
    name: "{{ __run_postfix_packages_install_map_backends[item] }}"
    state: "{{ 'latest' if run_postfix_autoupgrade else 'present' }}"
  loop: "{{ lookup('template', 'helper_list_map_backends.j2') }}"
  when:
    - __run_postfix_packages_install_map_backends[item] | length > 0
  register: __run_postfix_package_install_map_backends_result # to decide if a handler flush (config/default.yml) is necessary


- name: "Setup | Install | Default | Remove unwanted files and directories (e.g., to prevent conflicts or resolve incompatibilities)"
  ansible.builtin.file:
    path: "{{ item }}"
    state: "absent"
  when:
    - __run_postfix_paths_removal is defined
    - (__run_postfix_paths_removal | length) > 0
  loop: "{{ __run_postfix_paths_removal }}"
